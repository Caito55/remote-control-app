name: Build Android APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Configure environment
        run: |
          # Setup Java paths
          echo "JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64" >> $GITHUB_ENV
          echo "PATH=/usr/lib/jvm/temurin-17-jdk-amd64/bin:$PATH" >> $GITHUB_ENV
          
          # Setup Android paths
          ANDROID_HOME=/usr/local/lib/android/sdk
          ANDROID_NDK_HOME=$ANDROID_HOME/ndk/27.2.12479018
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools" >> $GITHUB_ENV
          
          # Setup build environment
          echo "USE_CCACHE=1" >> $GITHUB_ENV
          echo "NDK_CCACHE=/usr/bin/ccache" >> $GITHUB_ENV
          echo "JAVA_OPTS=-Xmx4096m" >> $GITHUB_ENV
          echo "PATH=$PATH:~/.local/bin" >> $GITHUB_ENV
          
          # Verify Java installation
          echo "=== Java Environment ==="
          java -version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip libtool automake autoconf build-essential python3-pip python3-dev git libffi-dev libssl-dev
          sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
          sudo apt-get install -y libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev
          sudo apt-get install -y default-jdk wget lsb-release software-properties-common maven
          sudo apt-get install -y ccache

      - name: Setup JAXB dependencies
        run: |
          # Crear directorio para las dependencias
          mkdir -p /home/runner/jaxb_libs
          cd /home/runner/jaxb_libs
          
          # Descargar dependencias JAXB usando Maven
          mvn dependency:get -Dartifact=javax.xml.bind:jaxb-api:2.3.1
          mvn dependency:get -Dartifact=org.glassfish.jaxb:jaxb-runtime:2.3.1
          mvn dependency:get -Dartifact=jakarta.xml.bind:jakarta.xml.bind-api:4.0.0
          
          # Copiar JARs al directorio
          find ~/.m2/repository -name "jaxb-api-2.3.1.jar" -exec cp {} . \;
          find ~/.m2/repository -name "jaxb-runtime-2.3.1.jar" -exec cp {} . \;
          find ~/.m2/repository -name "jakarta.xml.bind-api-4.0.0.jar" -exec cp {} . \;
          
          # Configurar CLASSPATH
          JAXB_LIBS=$(pwd)/*jar
          echo "CLASSPATH=$JAXB_LIBS:$CLASSPATH" >> $GITHUB_ENV
          
          # Verificar JARs
          ls -l *.jar

      - name: Setup Android SDK
        run: |
          # Verificar las dependencias JAXB
          echo "Using JAXB libraries from: $CLASSPATH"
          ls -l /home/runner/jaxb_libs/*.jar
          
          # Ejecutar sdkmanager con JAXB en el classpath
          java \
            -Djavax.xml.accessExternalDTD=all \
            -Djavax.xml.accessExternalSchema=all \
            -jar $ANDROID_HOME/cmdline-tools/latest/lib/sdkmanager.jar \
            --sdk_root=$ANDROID_HOME \
            --licenses
            
          java \
            -Djavax.xml.accessExternalDTD=all \
            -Djavax.xml.accessExternalSchema=all \
            -jar $ANDROID_HOME/cmdline-tools/latest/lib/sdkmanager.jar \
            --sdk_root=$ANDROID_HOME \
            "platforms;android-33" \
            "build-tools;33.0.0" \
            "ndk;27.2.12479018"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip libtool automake autoconf build-essential python3-pip python3-dev git libffi-dev libssl-dev
          sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
          sudo apt-get install -y libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev
          sudo apt-get install -y default-jdk wget lsb-release software-properties-common maven
          sudo apt-get install -y ccache
          
          # Instalar Python y buildozer
          python -m pip install --upgrade pip wheel
          pip install --upgrade buildozer Cython==0.29.33
          
          # Configurar JAXB
          mkdir -p /home/runner/jaxb_libs
          cd /home/runner/jaxb_libs
          
          # Descargar e instalar JAXB usando Maven
          mvn dependency:get -DremoteRepositories=https://repo1.maven.org/maven2 -Dartifact=javax.xml.bind:jaxb-api:2.3.1
          mvn dependency:get -DremoteRepositories=https://repo1.maven.org/maven2 -Dartifact=org.glassfish.jaxb:jaxb-runtime:2.3.1
          mvn dependency:copy-dependencies -DoutputDirectory=.
          
          # Configurar classpath
          JAXB_LIBS=$(echo /home/runner/jaxb_libs/*.jar | tr ' ' ':')
          echo "CLASSPATH=$JAXB_LIBS:$CLASSPATH" >> $GITHUB_ENV

      - name: Prepare buildozer.spec
        run: |
          cat > buildozer.spec << 'EOF'
          [app]
          title = RemoteControl
          package.name = remotecontrol
          package.domain = org.caito55
          source.dir = .
          source.include_exts = py,png,jpg,kv,atlas
          version = 0.1
          requirements = python3,kivy,flet==0.15.0,kivymd,pillow,websockets,asyncio
          orientation = portrait
          osx.python_version = 3
          android.archs = arm64-v8a
          android.allow_backup = True
          android.api = 33
          android.minapi = 21
          android.ndk_api = 21
          android.sdk_path = /usr/local/lib/android/sdk
          android.ndk_path = /usr/local/lib/android/sdk/ndk/27.2.12479018
          android.ant_path = /usr/bin/ant
          android.permissions = INTERNET
          android.debug = 1
          android.accept_sdk_license = True
          android.gradle_dependencies = org.chromium:androidx.webkit:1.4.0
          p4a.branch = develop
          p4a.bootstrap = sdl2
          android.java_version = 17
          
          [buildozer]
          log_level = 2
          warn_on_root = 0
          android_sdk_path = /usr/local/lib/android/sdk
          android_ndk_path = /usr/local/lib/android/sdk/ndk/27.2.12479018
          android_api = 33
          java_home = /usr/lib/jvm/temurin-17-jdk-amd64
          EOF

      - name: Install Buildozer
        run: |
          python -m pip install --upgrade pip wheel
          pip install --upgrade buildozer Cython==0.29.33
          sudo chown -R $USER:$USER .
          sudo apt-get install -y automake
          ccache -M 50G

      - name: Prepare build environment
        run: |
          # Crear y configurar directorios
          sudo mkdir -p /home/runner/.buildozer
          sudo mkdir -p /home/runner/.gradle
          sudo chown -R $USER:$USER /home/runner/.buildozer
          sudo chown -R $USER:$USER /home/runner/.gradle
          sudo chown -R $USER:$USER $ANDROID_HOME
          
          # Verificar entorno Java y Android
          echo "=== Environment Check ==="
          java -version
          echo "JAVA_HOME: $JAVA_HOME"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "CLASSPATH: $CLASSPATH"
          echo "JAXB libraries:"
          ls -l /home/runner/jaxb_libs/

      - name: Build APK
        env:
          BUILDOZER_WARN_ON_ROOT: 0
          JAVA_OPTS: "-Djavax.xml.accessExternalDTD=all -Djavax.xml.accessExternalSchema=all"
          ANDROID_HOME: /usr/local/lib/android/sdk
          ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/27.2.12479018
          JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
        run: |
          # Limpiar caché anterior
          rm -rf .buildozer || true
          
          # Asegurar que JAXB está en el classpath
          export CLASSPATH=$(echo /home/runner/jaxb_libs/*.jar | tr ' ' ':'):$CLASSPATH
          
          # Construir APK con log detallado
          buildozer -v android debug
      

      
      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: RemoteControl-APK
          path: bin/*.apk
